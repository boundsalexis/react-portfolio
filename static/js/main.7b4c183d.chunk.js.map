{"version":3,"sources":["components/navbar/index.js","components/wrapper/index.js","pages/ataglance/index.js","components/footer/index.js","pages/portfolio/index.js","pages/project/index.js","pages/bio/index.js","components/push/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Wrapper","children","Glance","data","projects","name","src","gif","alt","highlights","map","item","class","skills","key","education","Footer","Portfolio","shortDescription","Project","index","i","length","match","params","indexFinder","isDeployed","liveLink","repoLink","Biography","headshot","bio","Push","App","path","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b4c183d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nconst Navbar = props => {\n                return (\n\n                  <nav className=\"navbar navbar-light light-blue lighten-4\">\n                  <a className=\"navbar-brand\" href=\"/\">Alexis Bounds</a>\n                \n                  <button className=\"navbar-toggler toggler-example\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent1\"\n                    aria-controls=\"navbarSupportedContent1\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span className=\"dark-blue-text\"><i\n                        className=\"fas fa-bars fa-1x\"></i></span></button>\n                \n                  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent1\">\n                \n                    <ul className=\"navbar-nav mr-auto\">\n                      <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"/biography\">Biography</a>\n                      </li>\n                      <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/portfolio\">Portfolio</a>\n                      </li>\n                      {/* <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"\">Contact Information</a>\n                      </li> */}\n                      <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/\">At a glance...</a>\n                      </li>\n                    </ul>\n                \n                  </div>\n                \n                </nav>\n\n\n                )\n       \n}\n\n\n\nexport default Navbar;","  \nimport React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return( <main className=\"container\" >\n\n    {props.children}\n  </main>)\n  ;\n}\n\nexport default Wrapper;","\nimport React from \"react\";\nimport \"./style.css\";\nimport data from '../../data.json'\n\n\nfunction Glance(props) {\n    let styles = {\n        width: \"70%\",\n        height: \"20%\"\n    };\n    return (\n        <div className=\"container mainglance\">\n            <h1>Alexis at a glance...</h1>\n            <div className=\"ftapp\">\n                {/* <h2>Featured Application</h2> */}\n                <h3>{data.projects[0].name}</h3>\n                <img className=\"image\" src={data.projects[0].gif}  alt=\"politicalgif\"></img>\n                {data.projects[0].highlights.map(item => (\n                    <h6>{item}</h6>\n                ))}\n                <div className=\"stack\">\n                    <a href={'/portfolio/' + data.projects[0].name} className=\"btn btn-primary\">Get Details</a>\n                    {/* <a href={data.projects[0].liveLink} >Live Link</a>\n                    <a href={data.projects[0].repoLink} >Repository Link</a> */}\n                </div>\n                </div>\n                <div class=\"skills\">\n                <h3>Technical Skills</h3>\n                <div className=\"technical\">\n                    {data.skills.map(item => (\n                        <h6 key={item}>{item}</h6>\n                    ))}\n                </div>\n                </div>\n             \n                <div className=\"edu\">\n                    <h3>Education</h3>\n                    <h6>                {data.education[1]}\n                    </h6>\n                    <h6>{data.education[0]}</h6>\n                </div>\n\n\n            \n        </div>\n    );\n}\n\nexport default Glance;","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Footer(){\n    return (\n        <footer className=\"footer\">\n          <div className=\"container\" id=\"footercontent\">\n            <span className=\"text-muted\">\n          <a className=\"fab fa-github\" href=\"https://github.com/boundsalexis\"> </a>\n            Alexis Bounds\n            <a className=\"fab fa-linkedin-in\" href=\"https://www.linkedin.com/in/boundsalexis/\"> </a>\n            </span>\n          </div>\n        </footer>\n    )\n\n}\n\n\nexport default Footer;","\nimport React from \"react\";\nimport \"./style.css\";\nimport data from '../../data.json'\n\nfunction Portfolio(props) {\n    // let style = {\n    //     width: \"25%\",\n    //     height: \"25%\"\n    // };\n    return (\n        <div className=\"container mainportfolio\">\n            {data.projects.map(item => (\n                <div className=\"card\" key={item.name} >\n                    <img className=\"scale\"src={item.gif} className=\"card-img-top\" alt={item.name} ></img>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{item.name}</h5>\n                        <p className=\"card-text\">{item.shortDescription}</p>\n                        <a href={'/portfolio/' + item.name} class=\"btn btn-primary\">Get Details</a>\n                    </div>\n                </div>\n            ))}\n\n        </div>\n    )\n        ;\n}\n\nexport default Portfolio;","\nimport React from \"react\";\nimport \"./style.css\";\nimport data from '../../data.json';\n\nfunction Project(props) {\n    let index;\n    const indexFinder = (props) => {\n        for (let i = 0; i < data.projects.length; i++) {\n            if (props.match.params.id === data.projects[i].name) {\n                return (i)\n            }\n        }\n    }\n    index = indexFinder(props);\n  \n    return (\n        <div className=\"container\">\n            <div className=\"project\">\n            <h3>{data.projects[index].name}</h3>\n            {/* <h6>{data.projects[index].shortDescription}</h6> */}\n            <img className=\"projectimage\" src={data.projects[index].gif} alt={data.projects[index].name}></img>\n     {data.projects[index].highlights.map(item => (\n                <h6>{item}</h6>\n            ))}\n            </div>\n          \n\n            <div class=\"projectlinks\">\n                {data.projects[index].isDeployed &&\n                    <a href={data.projects[index].liveLink}>Live Link</a>\n                }\n                <a href={data.projects[index].repoLink}>Repository Link</a>\n                <a href=\"/portfolio\" className=\"btn btn-primary\">Return to portfolio</a>\n            </div>\n            {/* <a href=\"/portfolio\" className=\"btn btn-primary\">Return to portfolio</a> */}\n        </div>\n    );\n}\n\nexport default Project;","\nimport React from \"react\";\nimport \"./style.css\";\nimport data from '../../data.json'\n\nfunction Biography(props) {\n    // let style = {\n    //     width: \"25%\",\n    //     height: \"25%\"\n    // };\n    return (\n        <div className=\"container\">\n            <img class=\"img-fluid\" src={data.headshot} alt=\"my head\"></img>\n    <p>{data.bio}</p>\n        </div>\n    )\n        ;\n}\n\nexport default Biography;","import React from \"react\";\n// import \"./style.css\";\n\n\n\nfunction Push(){\n    return (\n<div className=\"push\">\n   \n</div>\n    )\n\n}\n\n\nexport default Push;","import React from 'react';\n// import {\n//   BrowserRouter as Router,\n\n//   Route,\n\n// } from \"react-router-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport Wrapper from \"./components/wrapper\";\nimport Glance from \"./pages/ataglance\";\nimport Footer from \"./components/footer\";\nimport Portfolio from \"./pages/portfolio\";\nimport Project from \"./pages/project\";\nimport Biography from './pages/bio';\nimport Push from \"./components/push\";\n// import Project from \"./pages/projects\";\n\nfunction App() {\n  return (\n    <div>\n       <Navbar/> \n      <Wrapper>\n      <Router>\n        <Switch>\n        <Route  path=\"/\" ><Glance></Glance></Route>\n      <Route  path=\"/biography\"><Biography></Biography></Route>\n      <Route  path=\"/portfolio\" ><Portfolio></Portfolio></Route>\n      <Route  path=\"/portfolio/:id\" ><Project></Project></Route>\n\n        </Switch>\n      {/* <Navbar/>       */}\n      </Router>\n      </Wrapper>\n      <Push/>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}